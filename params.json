{"name":"Backendbauer","tagline":"Charts backend","body":"Backendbauer\r\n============\r\n\r\n## What it is\r\n\r\nBackendbauer is a backend server with REST API for generating json data for frontend js charts.\r\nIt is written in Go and used by Mopinion.\r\n\r\n## What it needs\r\n* The [Go](http://golang.org) language\r\n* The charts library from Highcharts JS.\r\nhttp://www.highcharts.com/\r\n* [MyMySQL] (http://github.com/ziutek/mymysql) for Go\r\n* [Go http auth](https://github.com/abbot/go-http-auth)\r\n\r\n## How it works\r\n\r\nOnly two files are needed to get Backendbauer working:\r\n- server/server.go\r\n- server/config.json\r\n\r\nFor testing you can also use server/backendbauer.js\r\n\r\nServer.go is the source code. In config.json you can set MySQL databases with custom tables and fields.\r\nAll settings are based on the url from which the API call is made, the referer.\r\n\r\n### Install\r\nGo to server folder  \r\n`$ cd server`  \r\nbuild server  \r\n`$ sudo go build -o server server.go`  \r\n`sudo chmod 755 server`  \r\nmake symbolic link  \r\n`$ sudo ln -s [backendbauer dir]/server/server /usr/sbin/backendbauer`  \r\ncopy service file to /etc/init.d  \r\n`$ sudo cp backendbauer /etc/init.d/`  \r\n`sudo chmod 755 /etc/init.d/backendbauer`  \r\nTo start and stop  \r\n`sudo service backendbauer start`  \r\n`sudo service backendbauer stop`  \r\nor  \r\n`nohup [backendbauer dir]/server/server &`\r\n\r\n### MySQL\r\nTo test the example execute the `sql/my_database.sql` file on your local MySQL server.\r\nSet the proper username and password in config.json\r\n\r\n### Try\r\n`sudo service backendbauer start`   \r\nGo to   \r\n`http://localhost:8888/chart`\r\n\r\n\r\n## API\r\n\r\nEndpoint:  \r\n`https://[username]:[password]@[host name]:[port]/data`  \r\n\r\nThe API has a number of variables in order to get the right data in json format.\r\n\r\n- x: data field id as configured in config.json\r\n- y: data field id as configured in config.json\r\n- from_date: start date for query in `YYYY-MM-DD` format  \r\n- to_date: end date for query in `YYYY-MM-DD` format  \r\n- avg: 0 -> count, 1 -> average or 2 -> percentage (of items that are 1 and not 0) `0/1/2`\r\n- filter: a custom filter that is used to make the query.\r\nFilters can be added to narrow the query down in the following manner:  \r\n`|[field]:[value]` translates to `AND [field] = \"[value]\"`  \r\n`|[field]![value]` translates to `AND [field] <> \"[value]\"`  \r\nexample:  \r\n`filter=field1:right_value|field2!wrong_value`  \r\n- chart_type (optional): `line` or `pie`, etc. The response will send the type back. This can be used in some cases.\r\n- series (optional): `0/1` sometimes the ajax js code differs when a request is a series or a chart. The response returns this value.\r\n- jsonp: If `true` and a callback function is specified, the response will add the callback function (needed for jsonp crossdomain/port calls)\r\n- callback: if specified and `jsonp=true` the response will be included in a js callback (needed for jsonp crossdomain/port calls)\r\n- order (optional): `asc` or `desc` if given the query will be ordered ascending or descending respectively on the x variable\r\n- limit (optional): `[number]` for example `10` limits the result to 10 rows\r\n- combined (optional): when `true` the response will include the categories in the data `[['category1','data1']['category2']['data2']]` instead of `['data1','data2','data3']`. Easier to add series after a chart already exists\r\n- name (optional): the name of the y variable in the series. Response returns this name, so it can be used in js manipulation of the highchart object.\r\n- benchmark (optional): fixed value to set the y variable to, for benchmarking.\r\n\r\n### Example request\r\n\r\n```html\r\nhttp://franz:jawohl@localhost:8888/data?x=1&y=1&from_date=2013-04-01&to_date=2013-04-30&avg=1&filter=my_table.rating!12|my_table.rating!11&chart_type=area&series=0&jsonp=false&order=&limit=0&role=0&callback=Backendbauer.place&combined=true\r\n```\r\n\r\n## Response\r\n\r\nThe server responds in json format, with the following fields:\r\n\r\n- categories: an array object with the categories to be used in the chart\r\n- data: an array object with the data (and optionally the catagories for series creation)\r\n- x_field_name: the name of the x field that has been defined in the config.json\r\n- y_field_name: the name of the y field that has been defined in the config.json or the `name` variable from the request\r\n- x_labels: show labels of x variable?\r\n\r\n### Example response\r\n\r\n```json\r\n{\r\n\t\"categories\": [\r\n\t\t\"2012-10-01\"\r\n\t\t\"2012-10-02\"\r\n\t\t\"2012-10-03\"\r\n\t\t\"2012-10-04\"\r\n\t\t\"2012-10-05\"\r\n\t],\r\n\t\"data\": [\r\n\t\t[\"2012-10-01\",6]\r\n\t\t[\"2012-10-02\",5.3]\r\n\t\t[\"2012-10-03\",5.8]\r\n\t\t[\"2012-10-04\",5.6]\r\n\t\t[\"2012-10-05\",4.8]\r\n\t],\r\n\t\"x_field_name\":\"Date\",\r\n\t\"x_labels\":true,\r\n\t\"y_field_name\":\"Rating over time average\"\r\n}\r\n```\r\n\r\n## Future development\r\n- more filters such as OR and LIKE\r\n- other databases (such as MongoDB)\r\n- API to easily add data to make fast charts of any process imaginable\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}